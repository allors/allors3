delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<C# Adapters>>
TemplateVersion() ::= <<1.0.81>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, grp) ::= <<
$!
Copyright 2002-2021 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta._.DatabaseInterfaces:{interface|<generation template="castInterface" input="$interface._.Id $" output="$interface._.SingularName$.g.cs"/>}$
	$meta._.DatabaseClasses:{class|<generation template="castClass" input="$class._.Id $" output="$class._.SingularName$.g.cs"/>}$
	$meta._.MethodTypes:{methodType|<generation template="methodType" input="$methodType._.Id $" output="$methodType._.FullName$.g.cs"/>}$
</generations>
>>

castInterface(meta, grp, objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta,interface) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Database.Domain
{
	public partial interface $interface._.name$ : $if(interface._.ExistDirectSupertypes)$ $interface._.directSupertypes:{directSupertype|$directSupertype.SingularName$,}$ $endif$Allors.Database.IObject
	{
$interface._.ExclusiveDatabaseRoleTypes:{roleType|$interfaceExclusiveRoleType_Interface()$}$
$interface._.ExclusiveDatabaseAssociationTypes:{associationType|$interfaceExclusiveAssociationType_Interface()$}$
$interface._.ExclusiveMethodTypes:{methodType|$interfaceExclusiveMethodType_Interface()$}$
	}

	public partial interface $interface._.name$Builder : $interface._.DirectSupertypes:{directSupertype|$directSupertype.Name$Builder ,}$ global::System.IDisposable
	{
$interface._.exclusiveDatabaseRoleTypes:{roleType|$interfaceExclusiveRoleTypes_Builder()$}$
	}
}
>>

interfaceExclusiveAssociationType_Interface() ::= <<
$\n$
$if(associationType._.IsMany)$
		System.Collections.Generic.IEnumerable<$associationType._.ObjectType.Name$> $associationType._.PluralName$
		{
			get;
		}

		bool Exist$associationType._.PluralName$
		{
			get;
		}
$else$
		$associationType._.ObjectType.Name$ $associationType._.SingularName$
		{
			get;
		}

		bool Exist$associationType._.SingularName$
		{
			get;
		}
$endif$
>>

interfaceExclusiveRoleType_Interface() ::= <<
$\n$
$if(roleType._.ObjectType.IsUnit)$
		$roleType_ObjectType(roleType)$ $roleType._.SingularName$
		{
			get;
			set;
		}

		bool Exist$roleType._.SingularName${get;}

		void Remove$roleType._.SingularName$();
$else$
$if(roleType._.IsMany)$
		System.Collections.Generic.IEnumerable<$roleType_ObjectType(roleType)$> $roleType._.PluralName$
		{
			get;
			set;
		}

		void Add$roleType._.SingularName$ ($roleType_ObjectType(roleType)$ value);

		void Remove$roleType._.SingularName$ ($roleType_ObjectType(roleType)$ value);

		bool Exist$roleType._.PluralName$
		{
			get;
		}

		void Remove$roleType._.PluralName$();
$else$
		$roleType_ObjectType(roleType)$ $roleType._.SingularName$
		{
			get;
			set;
		}

		bool Exist$roleType._.SingularName$
		{
			get;
		}

		void Remove$roleType._.SingularName$();
$endif$
$endif$
>>

interfaceExclusiveMethodType_Interface() ::= <<
$\n$
		$methodType._.FullName$ $methodType._.Name$();
>>

interfaceExclusiveRoleTypes_Builder() ::= <<
$if(!roleType._.RelationType.IsDerived)$
$if(roleType._.ObjectType.IsUnit)$
		$objectType_NullableName(roleType._.ObjectType)$ $roleType._.Name$ {get;}
$else$
$if(roleType._.IsOne)$
		$objectType_NullableName(roleType._.ObjectType)$ $roleType._.Name$ {get;}

$else$

		global::System.Collections.Generic.List<$objectType_Name(roleType._.ObjectType)$> $roleType._.Name$ {get;}

$endif$
$endif$
$endif$
>>


castClass(meta, grp, objectType) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Database.Domain
{
	public partial class $class._.name$ : Allors.Database.IObject $class._.directSupertypes:{directSupertype|, $directSupertype.SingularName$}$
	{
		private readonly IStrategy strategy;
		private readonly Allors.Database.Meta.MetaPopulation m;

		public $class._.name$(Allors.Database.IStrategy strategy)
		{
			this.strategy = strategy;
			this.m = this.DatabaseContext().M;
		}

		public Allors.Database.Meta.MetaPopulation M => m;

		public Allors.Database.Meta.$class._.name$ Meta => this.m.$class._.name$;

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static $class._.name$ Instantiate (Allors.Database.ITransaction allorsTransaction, string allorsObjectId)
		{
			return ($class._.name$) allorsTransaction.Instantiate(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Transaction.Database.Id.Equals(this.Strategy.Transaction.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }

$class._.DatabaseRoleTypes:{roleClass|$classRoleClass_Class()$}$
$class._.DatabaseAssociationTypes:{associationType|$classAssociationType_Class()$}$
$class._.MethodTypes:{methodType|$classMethodType_Method()$}$

        #region Test Helpers
        public static $class._.name$ Create(ITransaction session) => ($class._.name$)session.Create(session.Database.Context().M.$class._.name$);

        public static $class._.name$[] Create(ITransaction session, int count) => ($class._.name$[])session.Create(session.Database.Context().M.$class._.name$, count);

        public static $class._.name$ Instantiate(ITransaction session, long id) => ($class._.name$)session.Instantiate(id);

        public static $class._.name$[] Instantiate(ITransaction session, string[] ids) => ($class._.name$[])session.Instantiate(ids);

        public static $class._.name$[] Extent(ITransaction session) => ($class._.name$[])session.Extent(session.Database.Context().M.$class._.name$).ToArray();
        #endregion
	}
}
>>

classAssociationType_Class() ::= <<
$\n$
$if(associationType._.IsMany)$
		virtual public System.Collections.Generic.IEnumerable<$associationType._.ObjectType.Name$> $associationType._.PluralName$
		{
			get
			{
				return Strategy.GetCompositesAssociation<$associationType._.ObjectType.Name$>(Meta.$associationType._.Name$);
			}
		}

		virtual public bool Exist$associationType._.PluralName$
		{
			get
			{
				return Strategy.ExistCompositesAssociation(Meta.$associationType._.Name$);
			}
		}
$else$
		virtual public $associationType._.ObjectType.Name$ $associationType._.SingularName$
		{
			get
			{
				return ($associationType._.ObjectType.Name$) Strategy.GetCompositeAssociation(Meta.$associationType._.Name$);
			}
		}

		virtual public bool Exist$associationType._.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.$associationType._.Name$);
			}
		}
$endif$
>>

classRoleClass_Class() ::= <<
$\n$
$if(roleClass.ObjectType.IsUnit)$
		virtual public $roleClass_ObjectType(roleClass)$ $roleClass.SingularName$
		{
			get
			{
				return ($roleClass_ObjectType(roleClass)$) Strategy.GetUnitRole(Meta.$roleClass.Name$);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$roleClass.Name$, value);
			}
		}

		virtual public bool Exist$roleClass.SingularName${
			get
			{
				return Strategy.ExistUnitRole(Meta.$roleClass.Name$);
			}
		}

		virtual public void Remove$roleClass.SingularName$()
		{
			Strategy.RemoveUnitRole(Meta.$roleClass.Name$);
		}
$else$
$if(roleClass.IsMany)$
		virtual public System.Collections.Generic.IEnumerable<$roleClass_ObjectType(roleClass)$> $roleClass.PluralName$
		{
			get
			{
				return Strategy.GetCompositesRole<$roleClass_ObjectType(roleClass)$>(Meta.$roleClass.Name$);
			}
			set
			{
				Strategy.SetCompositesRole(Meta.$roleClass.Name$, value);
			}
		}

		virtual public void Add$roleClass.SingularName$ ($roleClass_ObjectType(roleClass)$ value)
		{
			Strategy.AddCompositesRole(Meta.$roleClass.Name$, value);
		}

		virtual public void Remove$roleClass.SingularName$ ($roleClass_ObjectType(roleClass)$ value)
		{
			Strategy.RemoveCompositesRole(Meta.$roleClass.Name$, value);
		}

		virtual public bool Exist$roleClass.PluralName$
		{
			get
			{
				return Strategy.ExistCompositesRole(Meta.$roleClass.Name$);
			}
		}

		virtual public void Remove$roleClass.PluralName$()
		{
			Strategy.RemoveCompositesRole(Meta.$roleClass.Name$);
		}
$else$
		virtual public $roleClass_ObjectType(roleClass)$ $roleClass.SingularName$
		{
			get
			{
				return ($roleClass_ObjectType(roleClass)$) Strategy.GetCompositeRole(Meta.$roleClass.Name$);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.$roleClass.Name$, value);
			}
		}

		virtual public bool Exist$roleClass.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.$roleClass.Name$);
			}
		}

		virtual public void Remove$roleClass.SingularName$()
		{
			Strategy.RemoveCompositeRole(Meta.$roleClass.Name$);
		}
$endif$
$endif$
>>

classMethodType_Method() ::= <<
$\n$
		public $methodType._.FullName$ $methodType._.Name$()
		{
			return new $class._.Name$$methodType._.Name$(this);
		}
>>

methodType(meta, methodType) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Database.Domain
{
$if(methodType._.ObjectType.IsClass)$
	public partial class $methodType._.FullName$ : Allors.Database.Meta.Method
	{
		public $methodType._.FullName$($objectType_Name(methodType._.ObjectType)$ @object) : base(@object)
		{
		}

		public override Allors.Database.Meta.MethodInvocation MethodInvocation
		{
			get
			{
			    var m = this.Object.Strategy.Transaction.Database.Context().M;
				return new Allors.Database.Meta.MethodInvocation(m.$methodType._.ObjectType.SingularName$, m.$methodType._.ObjectType.SingularName$.$methodType._.Name$);
			}
		}
	}
$else$
	public abstract partial class $methodType._.FullName$ : Allors.Database.Meta.Method
	{
		protected $methodType._.FullName$($objectType_Name(methodType._.ObjectType)$ @object) : base(@object)
		{
		}
	}

$methodType._.ObjectType.Classes:{class|$methodTypeLeafClass()$}$
$endif$
}
>>

methodTypeLeafClass() ::= <<
	public partial class $class._.Name$$methodType._.Name$ : $methodType._.FullName$
	{
		public $class._.Name$$methodType._.Name$($objectType_Name(methodType._.ObjectType)$ @object) : base(@object)
		{
		}

		public override Allors.Database.Meta.MethodInvocation MethodInvocation
		{
			get
			{
			    var m = this.Object.Strategy.Transaction.Database.Context().M;
				return new Allors.Database.Meta.MethodInvocation(m.$class._.SingularName$, m.$class._.SingularName$.$methodType._.Name$);
			}
		}
	}
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

roleType_ObjectType(roleType) ::= <%
$objectType_NullableName(roleType._.ObjectType)$
%>

roleClass_ObjectType(roleType) ::= <%
$objectType_NullableName(roleClass.ObjectType)$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
