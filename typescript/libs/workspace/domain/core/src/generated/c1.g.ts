// Allors generated file.
// Do not edit this file, changes will be overwritten.
/* tslint:disable */
import { IObject, Method } from '@allors/workspace/domain/system';

import { C2 } from './C2.g';
import { Permission } from './Permission.g';
import { I1 } from './I1.g';
import { I12 } from './I12.g';
import { I2 } from './I2.g';
import { S1 } from './S1.g';

export interface C1 extends IObject, I1 {

    CanReadC1AllorsBinary: boolean;
    CanWriteC1AllorsBinary: boolean;
    C1AllorsBinary: any | null;

    CanReadC1AllorsBoolean: boolean;
    CanWriteC1AllorsBoolean: boolean;
    C1AllorsBoolean: boolean | null;

    CanReadC1AllorsDateTime: boolean;
    CanWriteC1AllorsDateTime: boolean;
    C1AllorsDateTime: string | null;

    CanReadC1DateTimeLessThan: boolean;
    CanWriteC1DateTimeLessThan: boolean;
    C1DateTimeLessThan: string | null;

    CanReadC1DateTimeGreaterThan: boolean;
    CanWriteC1DateTimeGreaterThan: boolean;
    C1DateTimeGreaterThan: string | null;

    CanReadC1DateTimeBetweenA: boolean;
    CanWriteC1DateTimeBetweenA: boolean;
    C1DateTimeBetweenA: string | null;

    CanReadC1DateTimeBetweenB: boolean;
    CanWriteC1DateTimeBetweenB: boolean;
    C1DateTimeBetweenB: string | null;

    CanReadC1AllorsDecimal: boolean;
    CanWriteC1AllorsDecimal: boolean;
    C1AllorsDecimal: string | null;

    CanReadC1DecimalLessThan: boolean;
    CanWriteC1DecimalLessThan: boolean;
    C1DecimalLessThan: string | null;

    CanReadC1DecimalGreaterThan: boolean;
    CanWriteC1DecimalGreaterThan: boolean;
    C1DecimalGreaterThan: string | null;

    CanReadC1DecimalBetweenA: boolean;
    CanWriteC1DecimalBetweenA: boolean;
    C1DecimalBetweenA: string | null;

    CanReadC1DecimalBetweenB: boolean;
    CanWriteC1DecimalBetweenB: boolean;
    C1DecimalBetweenB: string | null;

    CanReadC1AllorsDouble: boolean;
    CanWriteC1AllorsDouble: boolean;
    C1AllorsDouble: number | null;

    CanReadC1DoubleLessThan: boolean;
    CanWriteC1DoubleLessThan: boolean;
    C1DoubleLessThan: number | null;

    CanReadC1DoubleGreaterThan: boolean;
    CanWriteC1DoubleGreaterThan: boolean;
    C1DoubleGreaterThan: number | null;

    CanReadC1DoubleBetweenA: boolean;
    CanWriteC1DoubleBetweenA: boolean;
    C1DoubleBetweenA: number | null;

    CanReadC1DoubleBetweenB: boolean;
    CanWriteC1DoubleBetweenB: boolean;
    C1DoubleBetweenB: number | null;

    CanReadC1AllorsInteger: boolean;
    CanWriteC1AllorsInteger: boolean;
    C1AllorsInteger: number | null;

    CanReadC1IntegerLessThan: boolean;
    CanWriteC1IntegerLessThan: boolean;
    C1IntegerLessThan: number | null;

    CanReadC1IntegerGreaterThan: boolean;
    CanWriteC1IntegerGreaterThan: boolean;
    C1IntegerGreaterThan: number | null;

    CanReadC1IntegerBetweenA: boolean;
    CanWriteC1IntegerBetweenA: boolean;
    C1IntegerBetweenA: number | null;

    CanReadC1IntegerBetweenB: boolean;
    CanWriteC1IntegerBetweenB: boolean;
    C1IntegerBetweenB: number | null;

    CanReadC1AllorsString: boolean;
    CanWriteC1AllorsString: boolean;
    C1AllorsString: string | null;

    CanReadC1AllorsStringEquals: boolean;
    CanWriteC1AllorsStringEquals: boolean;
    C1AllorsStringEquals: string | null;

    CanReadAllorsStringMax: boolean;
    CanWriteAllorsStringMax: boolean;
    AllorsStringMax: string | null;

    CanReadC1AllorsUnique: boolean;
    CanWriteC1AllorsUnique: boolean;
    C1AllorsUnique: string | null;

    CanReadC1C1Many2Manies: boolean;
    CanWriteC1C1Many2Manies: boolean;
    C1C1Many2Manies: C1[];
    AddC1C1Many2Many(value: C1) : void;
    RemoveC1C1Many2Many(value: C1) : void;

    CanReadC1C1Many2One: boolean;
    CanWriteC1C1Many2One: boolean;
    C1C1Many2One: C1 | null;

    CanReadC1C1One2Manies: boolean;
    CanWriteC1C1One2Manies: boolean;
    C1C1One2Manies: C1[];
    AddC1C1One2Many(value: C1) : void;
    RemoveC1C1One2Many(value: C1) : void;

    CanReadC1C1One2One: boolean;
    CanWriteC1C1One2One: boolean;
    C1C1One2One: C1 | null;

    CanReadC1C2Many2Manies: boolean;
    CanWriteC1C2Many2Manies: boolean;
    C1C2Many2Manies: C2[];
    AddC1C2Many2Many(value: C2) : void;
    RemoveC1C2Many2Many(value: C2) : void;

    CanReadC1C2Many2One: boolean;
    CanWriteC1C2Many2One: boolean;
    C1C2Many2One: C2 | null;

    CanReadC1C2One2Manies: boolean;
    CanWriteC1C2One2Manies: boolean;
    C1C2One2Manies: C2[];
    AddC1C2One2Many(value: C2) : void;
    RemoveC1C2One2Many(value: C2) : void;

    CanReadC1C2One2One: boolean;
    CanWriteC1C2One2One: boolean;
    C1C2One2One: C2 | null;

    CanReadC1I12Many2Manies: boolean;
    CanWriteC1I12Many2Manies: boolean;
    C1I12Many2Manies: I12[];
    AddC1I12Many2Many(value: I12) : void;
    RemoveC1I12Many2Many(value: I12) : void;

    CanReadC1I12Many2One: boolean;
    CanWriteC1I12Many2One: boolean;
    C1I12Many2One: I12 | null;

    CanReadC1I12One2Manies: boolean;
    CanWriteC1I12One2Manies: boolean;
    C1I12One2Manies: I12[];
    AddC1I12One2Many(value: I12) : void;
    RemoveC1I12One2Many(value: I12) : void;

    CanReadC1I12One2One: boolean;
    CanWriteC1I12One2One: boolean;
    C1I12One2One: I12 | null;

    CanReadC1I1Many2Manies: boolean;
    CanWriteC1I1Many2Manies: boolean;
    C1I1Many2Manies: I1[];
    AddC1I1Many2Many(value: I1) : void;
    RemoveC1I1Many2Many(value: I1) : void;

    CanReadC1I1Many2One: boolean;
    CanWriteC1I1Many2One: boolean;
    C1I1Many2One: I1 | null;

    CanReadC1I1One2Manies: boolean;
    CanWriteC1I1One2Manies: boolean;
    C1I1One2Manies: I1[];
    AddC1I1One2Many(value: I1) : void;
    RemoveC1I1One2Many(value: I1) : void;

    CanReadC1I1One2One: boolean;
    CanWriteC1I1One2One: boolean;
    C1I1One2One: I1 | null;

    CanReadC1I2Many2Manies: boolean;
    CanWriteC1I2Many2Manies: boolean;
    C1I2Many2Manies: I2[];
    AddC1I2Many2Many(value: I2) : void;
    RemoveC1I2Many2Many(value: I2) : void;

    CanReadC1I2Many2One: boolean;
    CanWriteC1I2Many2One: boolean;
    C1I2Many2One: I2 | null;

    CanReadC1I2One2Manies: boolean;
    CanWriteC1I2One2Manies: boolean;
    C1I2One2Manies: I2[];
    AddC1I2One2Many(value: I2) : void;
    RemoveC1I2One2Many(value: I2) : void;

    CanReadC1I2One2One: boolean;
    CanWriteC1I2One2One: boolean;
    C1I2One2One: I2 | null;



    C1sWhereC1C1Many2Many : C1[];


    C1sWhereC1C1Many2One : C1[];


    C1WhereC1C1One2Many : C1 | null;


    C1WhereC1C1One2One : C1 | null;


    C2WhereC2C1One2One : C2 | null;


    C2sWhereC2C1Many2Many : C2[];


    C2sWhereC2C1Many2One : C2[];


    C2WhereC2C1One2Many : C2 | null;


    I1WhereI1C1One2One : I1 | null;


    I1WhereI1C1One2Many : I1 | null;


    I1sWhereI1C1Many2Many : I1[];


    I1sWhereI1C1Many2One : I1[];


    I12sWhereI12C1Many2Many : I12[];


    I12WhereI12C1One2One : I12 | null;


    I12WhereI12C1One2Many : I12 | null;


    I12sWhereI12C1Many2One : I12[];


    I2sWhereI2C1Many2One : I2[];


    I2WhereI2C1One2Many : I2 | null;


    I2WhereI2C1One2One : I2 | null;


    I2sWhereI2C1Many2Many : I2[];


    CanExecuteClassMethod: boolean;
    ClassMethod: Method;

}