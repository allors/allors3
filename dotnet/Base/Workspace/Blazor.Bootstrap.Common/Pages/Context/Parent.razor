@page "/context"
@implements IDisposable
@using Task = System.Threading.Tasks.Task
@using Person = Allors.Workspace.Domain.Person
@using Allors.Workspace.Meta
@attribute [Authorize]
@inject IWorkspace Workspace
@inject NavigationManager NavigationManager

<CascadingValue Value="@Revision" Name="Revision">
    <CascadingValue Value="@M" IsFixed="true">

        <h2>
            Parent Revision: @Revision
        </h2>

        <ChildA Person="@person" />
        <ChildB Person="@person" />

    </CascadingValue>
</CascadingValue>

@code {
    ISession Session { get; set; }

    long Revision { get; set; }

    M M => this.Session.Workspace.Services.Get<M>();

    Person person;

    protected override async Task OnInitializedAsync()
    {
        this.Session = this.Workspace.CreateSession();
        this.Session.OnChange += SessionOnChange;

        var pull = new[]
        {
            new Pull
            {
                Extent = new Filter(M.Person),
            }
    };

        var result = await Session.PullAsync(pull);

        person = result.GetCollection<Person>().First();
    }

    private void SessionOnChange(object sender, EventArgs e)
    {
        this.Revision++;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.Session.OnChange -= this.SessionOnChange;
    }
}
