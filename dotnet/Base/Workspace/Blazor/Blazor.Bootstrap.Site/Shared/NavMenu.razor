@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor.Bootstrap.Server</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        @foreach (var navItem in navItems)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@NavigationManager.ToAbsoluteUri(navItem.Url).AbsoluteUri">
                    <span class="oi oi-@navItem.Icon" aria-hidden="true"></span> @navItem.Name
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    class NavItem
    {
        public string Name;
        public string Icon;
        public string Url;
    }

    NavItem[] navItems;

    bool IsOpen { get; set; } = true;

    void onclick(MouseEventArgs e)
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    void OpenChanged(bool e)
    {
        IsOpen = e;
        InvokeAsync(StateHasChanged);
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        navItems = new[]
        {
            new NavItem()
            {
                Name = "Organisations",
                Url = "organisation/list",
                Icon = "briefcase"
            },
            new NavItem()
            {
                Name = "People",
                Url = "person/list",
                Icon = "person"
            },
            new NavItem()
            {
                Name = "Context",
                Url = "context",
                Icon = "star"
            },
            new NavItem()
            {
                Name = "Image",
                Url = "image",
                Icon = "image"
            },
            new NavItem()
            {
                Name = "MediaTyped",
                Url = "mediatyped/list",
                Icon ="circle-check",
            },

    }.OrderBy(i => i.Name).ToArray();
    }
}
