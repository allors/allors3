// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace src.app.tests.form
{
    using OpenQA.Selenium;
    using Components;

    public partial class FormComponent : Components.RoutedComponent
    {
        public FormComponent(IWebDriver driver) : base(driver)
        {
        }

        public Components.MatInput<FormComponent> String => this.MatInput(Allors.Meta.M.., "FormComponent");


        public Components.MatInput<FormComponent> Decimal => this.MatInput(Allors.Meta.M.., "FormComponent");


        public Components.MatDatepicker<FormComponent> Date => this.MatDatepicker(Allors.Meta.M.., "FormComponent");


        public Components.Button NewDate => new Components.Button(this.Driver, "InnerText", @"New Date", "FormComponent");


        public Components.MatDatetimepicker<FormComponent> DateTime => this.MatDatetimepicker(Allors.Meta.M.., "FormComponent");


        public Components.Button NewDateTime => new Components.Button(this.Driver, "InnerText", @"New DateTime", "FormComponent");


        public Components.MatDatetimepicker<FormComponent> DateTime2 => this.MatDatetimepicker(Allors.Meta.M.., "FormComponent");


        public Components.Button NewDateTime2 => new Components.Button(this.Driver, "InnerText", @"New DateTime2", "FormComponent");


        public Components.MatAutocomplete<FormComponent> AutocompleteFilter => this.MatAutocomplete(Allors.Meta.M.., "FormComponent");


        public Components.MatAutocomplete<FormComponent> AutocompleteDerivedFilter => this.MatAutocomplete(Allors.Meta.M.., "FormComponent");


        public Components.MatAutocomplete<FormComponent> AutocompleteOptions => this.MatAutocomplete(Allors.Meta.M.., "FormComponent");


        public Components.MatAutocomplete<FormComponent> AutocompleteDerivedOptions => this.MatAutocomplete(Allors.Meta.M.., "FormComponent");


        public Components.MatSelect<FormComponent> Select => this.MatSelect(Allors.Meta.M.., "FormComponent");


        public Components.MatSelect<FormComponent> SelectDerived => this.MatSelect(Allors.Meta.M.., "FormComponent");


        public Components.MatCheckbox<FormComponent> Checkbox => this.MatCheckbox(Allors.Meta.M.., "FormComponent");


        public Components.MatChips<FormComponent> Chips => this.MatChips(Allors.Meta.M.., "FormComponent");


        public Components.MatFile<FormComponent> File => this.MatFile(Allors.Meta.M.., "FormComponent");


        public Components.MatFiles<FormComponent> MultipleFiles => this.MatFiles(Allors.Meta.M.., "FormComponent");


        public Components.MatRadioGroup<FormComponent> RadioGroup => this.MatRadioGroup(Allors.Meta.M.., "FormComponent");


        public Components.MatSlider<FormComponent> Slider => this.MatSlider(Allors.Meta.M.., "FormComponent");


        public Components.MatSlidetoggle<FormComponent> SlideToggle => this.MatSlidetoggle(Allors.Meta.M.., "FormComponent");


        public Components.MatTextarea<FormComponent> PlainText => this.MatTextarea(Allors.Meta.M.., "FormComponent");


        public Components.MatMarkdown<FormComponent> Markdown => this.MatMarkdown(Allors.Meta.M.., "FormComponent");


        public Components.MatLocalisedText<FormComponent> LocalisedTexts => this.MatLocalisedText(Allors.Meta.M.., "FormComponent");


        public Components.MatLocalisedMarkdown<FormComponent> LocalisedMarkdowns => this.MatLocalisedMarkdown(Allors.Meta.M.., "FormComponent");








        public Components.Button CANCEL => new Components.Button(this.Driver, "InnerText", @"CANCEL", "FormComponent");


        public Components.Button SAVE => new Components.Button(this.Driver, "InnerText", @"SAVE", "FormComponent");


        public Components.Button RESET => new Components.Button(this.Driver, "InnerText", @"RESET", "FormComponent");

    }
}