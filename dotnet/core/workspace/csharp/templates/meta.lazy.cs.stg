group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2021 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
	<generation template="units" output="units.g.cs"/>
	<generation template="interfaces" output="interfaces.g.cs"/>
	<generation template="classes" output="classes.g.cs"/>
	<generation template="associationTypes" output="associationTypes.g.cs"/>
	<generation template="roleTypes" output="roleTypes.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

m(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta.Lazy
{
    public sealed class LazyM : MetaPopulation, M
    {
        // Units
$meta._.Units:{unit|        internal readonly Lazy$unit._.SingularName$ $unit._.SingularName$ = new Lazy$unit._.SingularName$();}; separator="\n"$

        // Interfaces
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        internal readonly Lazy$interface._.SingularName$ $interface._.SingularName$ = new Lazy$interface._.SingularName$();}; separator="\n"$

        // Classes
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        internal readonly Lazy$class._.SingularName$ $class._.SingularName$ = new Lazy$class._.SingularName$();}; separator="\n"$

        // M
$meta._.Units:{unit|        $unit._.SingularName$ M.$unit._.SingularName$ => this.$unit._.SingularName$;}; separator="\n"$
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        $interface._.SingularName$ M.$interface._.SingularName$ => this.$interface._.SingularName$;}; separator="\n"$
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        $class._.SingularName$ M.$class._.SingularName$ => this.$class._.SingularName$;}; separator="\n"$
    }
}
>>

units(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class Lazy$unit._.SingularName$ : Unit, $unit._.SingularName$ {}

>>

interfaces(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public class Lazy$interface._.SingularName$ : Interface, $interface._.SingularName$ {

$interface._.WorkspaceSubtypesByWorkspaceName.(workspaceName):{subtype|        public $subtype._.SingularName$ As$subtype._.SingularName$ { get;  internal set;\}}; separator="\n"$

$interface._.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; \} = new MethodType();}; separator="\n"$
$interface._.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; internal set; \}}; separator="\n"$

$interface._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; \} = new Lazy$roleType._.FullName$();}; separator="\n"$
$interface._.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; internal set; \}}; separator="\n"$

$interface._.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; \} = new Lazy$associationType._.Name$();}; separator="\n"$
$interface._.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; internal set; \}}; separator="\n"$

    }

>>

classes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public class Lazy$class._.SingularName$ : Class, $class._.SingularName$ {

$class._.WorkspaceExclusiveMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; \} = new MethodType();}; separator="\n"$
$class._.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; internal set; \}}; separator="\n"$

$class._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; \} = new Lazy$roleType._.FullName$();}; separator="\n"$
$class._.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; internal set; \}}; separator="\n"$

$class._.WorkspaceExclusiveAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; \} = new Lazy$associationType._.Name$();}; separator="\n"$
$class._.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; internal set; \}}; separator="\n"$
    }

>>

associationTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Composites:{composite|$define_associationTypes(composite)$}; separator="\n"$
}
>>

define_associationTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_associationType(roleType._.associationType)$}; separator="\n"$
>>

define_associationType(associationType) ::= <<
    public class Lazy$associationType._.Name$ : AssociationType, $associationType._.Name$
    {
        $associationType._.ObjectType.SingularName$ Meta.$associationType._.Name$.ObjectType => ((M)this.MetaPopulation).$associationType._.ObjectType.SingularName$;
    }

>>

roleTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Composites:{composite|$define_roleTypes(composite)$}; separator="\n"$
}
>>

define_roleTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_roleType(roleType)$}; separator="\n"$
>>

define_roleType(roleType) ::= <<
    public class Lazy$roleType.FullName$ : RoleType, Meta.$roleType.FullName$
    {

$if(roleType.ObjectType.IsComposite)$
        $roleType.ObjectType.SingularName$ Meta.$roleType.FullName$.ObjectType => ((M)this.MetaPopulation).$roleType.ObjectType.SingularName$;
$endif$
    }

>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta.Lazy
{
	public class MetaBuilder
	{
        public M Build() {
            var m =  new LazyM();

            var units = this.BuildUnits(m);
            var interfaces = this.BuildInterfaces(m);
            var classes = this.BuildClasses(m);
            var inheritances = this.BuildInheritances(m);
            var relationTypes = this.BuildRelationTypes(m);
            var methodTypes = this.BuildMethodTypes(m);

            this.AssignPropertyTypes(m);
            this.AssignMethodTypes(m);

            m.Init(units, interfaces, classes, inheritances, relationTypes, methodTypes);

            return m;
        }

		private IUnitInternals[] BuildUnits(LazyM m)
		{
$meta._.Units:{unit|$build_unit(unit)$}; separator="\n"$

            return new IUnitInternals[]
            {
$meta._.Units:{unit|                m.$unit.SingularName$}; separator=",\n"$
            };
		}

        private IInterfaceInternals[] BuildInterfaces(LazyM m)
        {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$build_interface(interface)$}; separator="\n"$

            return new IInterfaceInternals[]
            {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|                m.$interface._.SingularName$}; separator=",\n"$
            };
        }

        private IClassInternals[] BuildClasses(LazyM m)
        {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$build_class(class)$}; separator="\n"$

            return new IClassInternals[]
            {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|                m.$class._.SingularName$}; separator=",\n"$
            };
        }

        private Inheritance[] BuildInheritances(LazyM m)
        {
            return new []
            {$meta._.Composites:{composite|$inheritance(composite)$}$
            };
        }

        private IRelationTypeInternals[] BuildRelationTypes(LazyM m)
        {

            return new IRelationTypeInternals[]
            {
$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|            this.Build$relationType._.Name$(m),}; separator="\n"$
            };
        }

$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|$build_relationType(relationType)$}; separator="\n"$

        private IMethodTypeInternals[] BuildMethodTypes(LazyM m)
		{
		    return new IMethodTypeInternals[]
                {$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|            this.Build$methodType._.FullName$(m),}; separator="\n"$
                };
		}

        private void AssignPropertyTypes(LazyM m)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(LazyM m)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_methods(composite)$}; separator="\n"$
        }

$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
    }
}
>>

define_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleType $class._.Name$$roleType.Name$;}$
>>

assign_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class._.Name$$roleType.Name$ = relationTypes.$roleType._.RelationType.Name$.RoleType;}$
>>

build_unit(unit) ::= <<
	        m.$unit._.SingularName$.Init(UnitTags.$unit._.SingularName$, UnitNames.$unit._.SingularName$);
>>

build_interface(interface) ::= <<
	        m.$interface._.SingularName$.Init(tag: $interface._.Tag$, singularName: "$interface._.SingularName$"$if(interface.ExistAssignedPluralName)$, pluralName: "$interface._.PluralName$"$endif$);
>>

build_class(class) ::= <<
	        m.$class._.SingularName$.Init(tag: $class._.Tag$, singularName: "$class._.SingularName$"$if(class.ExistAssignedPluralName)$, pluralName: "$class._.PluralName$"$endif$$if(!class.HasDatabaseOrigin)$, origin: Allors.Origin.$class._.Origin$$endif$);
>>

inheritance(composite) ::= <<$composite._.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$                new Inheritance(m.$composite._.SingularName$, m.$superType.SingularName$),>>

build_relationType(relationType) ::= <<
        private IRelationTypeInternals Build$relationType._.Name$(LazyM m)
        {
            var associationType = (IAssociationTypeInternals)$if(relationType._.RoleType._.ObjectType._.IsUnit)$new AssociationTypeWithUnitRole();$else$m.$relationType._.RoleType._.ObjectType.SingularName$.$relationType._.AssociationType._.Name$;$endif$
            var roleType = (RoleType)m.$relationType._.AssociationType._.ObjectType.SingularName$.$relationType._.RoleType._.Name$;

            var relationType = new RelationType($relationType._.Tag$, associationType, m.$relationType._.AssociationType._.ObjectType.Name$, roleType, m.$relationType._.RoleType._.ObjectType.Name$$if(relationType.Multiplicity)$, Allors.Multiplicity.$relationType._.Multiplicity$$endif$);

            relationType.Init($Separated([origin(relationType), isDerived(relationType)], ",")$);

$initRoleType(roleType=relationType.RoleType)$

            return relationType;
        }
>>

origin(relationType) ::= <<$if(!relationType._.HasDatabaseOrigin)$origin: Origin.$relationType._.Origin$$endif$>>
isDerived(relationType) ::= <<$if(relationType.IsDerived)$isDerived: $relationType._.IsDerived$$endif$>>

initRoleType(roleType) ::= <<
            roleType.Init($Separated([singularName(roleType), pluralName(roleType), size(roleType), precision(roleType), scale(roleType), isRequired(roleType), isUnique(roleType), mediaType(roleType)], ",")$);
>>

singularName(roleType) ::= <<$if(roleType.ExistAssignedSingularName)$singularName: "$roleType.SingularName$"$endif$>>
pluralName(roleType) ::= <<$if(roleType.ExistAssignedPluralName)$pluralName: "$roleType.PluralName$"$endif$>>
size(roleType) ::= <<$if(relationType.RoleType.Size)$size: $relationType._.RoleType.Size$ $endif$>>
precision(roleType) ::= <<$if(relationType.RoleType.Precision)$precision: $relationType._.RoleType.Precision$$endif$>>
scale(roleType) ::= <<$if(relationType.RoleType.Scale)$scale: $relationType._.RoleType.Scale$$endif$>>
isRequired(roleType) ::= <<$if(relationType.RoleType.IsRequired)$isRequired: $relationType._.RoleType.IsRequired$$endif$>>
isUnique(roleType) ::= <<$if(relationType.RoleType.IsUnique)$isUnique: $relationType._.RoleType.IsUnique$$endif$>>
mediaType(roleType) ::= <<$if(relationType.RoleType.MediaType)$mediaType: "$relationType._.RoleType.MediaType$"$endif$>>

build_methodType(methodType) ::= <<
        private IMethodTypeInternals Build$methodType._.FullName$(LazyM m)
        {
            return ((MethodType)m.$methodType._.ObjectType.Name$.$methodType._.Name$).Init($methodType._.Tag$, m.$methodType._.ObjectType.Name$, "$methodType._.Name$");
        }
>>

assign_properties(composite) ::= <<
$composite._.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|$assign_roleType(roleType)$}; separator="\n"$
$composite._.WorkspaceInheritedAssociationTypesByWorkspaceName.(workspaceName):{associationType|$assign_associationType(associationType)$}; separator="\n"$
>>

assign_roleType(roleType) ::= <<
                m.$composite._.SingularName$.$roleType._.Name$ = m.$roleType._.AssociationType._.ObjectType._.SingularName$.$roleType._.Name$;
>>

assign_associationType(associationType) ::= <<
                m.$composite._.SingularName$.$associationType._.Name$ = ($associationType._.Name$) m.$associationType._.ObjectType._.SingularName$.$associationType._.RoleType._.Name$.AssociationType;
>>

assign_methods(composite) ::= <<
$composite._.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|$assign_methodType(methodType)$}; separator="\n"$
>>

assign_methodType(methodType) ::= <<
                m.$composite._.SingularName$.$methodType._.Name$ = m.$methodType._.ObjectType._.SingularName$.$methodType._.Name$;
>>

DropEmpty ::= ["": false, default: key]

Separated(l, s, w=false) ::= "$if (DropEmpty.(first(l)))$$if (w)$$s$$endif$$first(l)$$Separated(rest(l), s, true)$$else$$if (rest(l))$$Separated(rest(l), s, w)$$endif$$endif$"
